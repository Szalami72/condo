import { Component, Input, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { VoteService } from '../../../admin/services/vote.service';

@Component({
  selector: 'app-votes',
  standalone: true,
  imports: [ CommonModule ],
  templateUrl: './votes.component.html',
  styleUrls: ['./votes.component.css']
})
export class VotesComponent implements OnInit {

  votes: any[] = [];
  selectedAnswers: { [key: number]: any } = {};
  userId: number | null = null;
  hasOpenVote: { [key: number]: boolean } = {}; // K√©rd√©senk√©nt t√°roljuk a nyitotts√°got
  canViewResults: { [key: number]: boolean } = {}; // K√©rd√©senk√©nt t√°roljuk a megtekinthet≈ës√©get

  constructor(private voteService: VoteService) { }

  ngOnInit(): void {
    const currentUser = this.getCurrentUserDatas();
    if (currentUser) {
      this.userId = currentUser.id;
      this.getVotes();
    }
  }

  // üîπ Bet√∂ltj√ºk az √∂sszes szavaz√°st √©s ellen≈ërizz√ºk az √°llapotukat
  private getVotes(): void {
    if (!this.userId) {
      console.error("User ID is missing");
      return;
    }
  
    this.voteService.getVotes(this.userId, 0).subscribe({
      next: (response) => {
        const now = new Date();
  
        // Sz≈±rj√ºk a szavaz√°sokat, hogy csak az akt√≠v vagy a h√°rom napon bel√ºli lej√°rt szavaz√°sok maradjanak
        this.votes = response.data.filter((vote: any) => {
          const endDate = new Date(vote.end_date);
          const threeDaysAfterEnd = new Date(endDate);
          threeDaysAfterEnd.setDate(threeDaysAfterEnd.getDate() + 3);
  
          const isExpired = now > endDate;
          return vote.status === 'open' || (isExpired && now <= threeDaysAfterEnd);
        }).map((vote: any) => {
          const endDate = new Date(vote.end_date);
          const threeDaysAfterEnd = new Date(endDate);
          threeDaysAfterEnd.setDate(threeDaysAfterEnd.getDate() + 3);
  
          // Szavaz√°s st√°tuszok
          this.hasOpenVote[vote.question_id] = vote.status === 'open';
          const isExpired = now > endDate;
          this.canViewResults[vote.question_id] = isExpired && now <= threeDaysAfterEnd;
  
          return vote;
        });
  
        // Akt√≠v szavaz√°sok el≈ër√©bb rendez√©se
        this.votes.sort((a: any, b: any) => {
          if (a.status === 'open' && b.status !== 'open') {
            return -1;  // Akt√≠v szavaz√°s el≈ër√©bb ker√ºlj√∂n
          }
          if (a.status !== 'open' && b.status === 'open') {
            return 1;  // Lez√°rt szavaz√°s h√°tr√©bb ker√ºlj√∂n
          }
          return 0;  // Egy√©bk√©nt nem v√°ltozik a sorrend
        });
  
      },
      error: (error) => {
        console.error("Hiba a szavaz√°sok lek√©r√©se sor√°n:", error);
      }
    });
  }
  
  

  // üîπ A felhaszn√°l√≥ kor√°bbi szavazat√°nak vissza√°ll√≠t√°sa
  setSelectedAnswer(): void {
    if (this.votes.length > 0 && this.userId) {
      this.votes.forEach(vote => {
        const userVote = vote.answers.find((answer: any) => answer.user_vote === 1);
        if (userVote) {
          this.selectedAnswers[vote.question_id] = userVote;
        }
      });
    }
  }

  // üîπ Szavazat kiv√°laszt√°sa k√©rd√©senk√©nt
  selectAnswer(questionId: number, answer: any): void {
    if (this.selectedAnswers[questionId]?.answer_id === answer.answer_id) {
      // Ha ugyanarra a v√°laszra kattintunk, akkor elt√°vol√≠tjuk a kijel√∂l√©st
      delete this.selectedAnswers[questionId];
    } else {
      // K√ºl√∂nben be√°ll√≠tjuk a v√°lasztott v√°laszt
      this.selectedAnswers[questionId] = answer;
    }
  }
  

  // üîπ Szavazat lead√°sa k√©rd√©senk√©nt
  submitVote(questionId: number): void {
    const selectedAnswer = this.selectedAnswers[questionId];

    if (!selectedAnswer || !this.hasOpenVote[questionId]) {
      console.error('Nincs kiv√°lasztott v√°lasz vagy a szavaz√°s m√°r lez√°rult.');
      return;
    }

    const voteData = {
      user_id: this.userId,
      question_id: questionId,
      answer_id: selectedAnswer.answer_id,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };

    this.voteService.submitVote(voteData).subscribe(
      response => {
        console.log('Sikeres szavaz√°s:', response);
        this.getVotes(); // Friss√≠tj√ºk az √∂sszes szavaz√°st
      },
      error => {
        console.error('Hiba t√∂rt√©nt a szavaz√°s sor√°n:', error);
      }
    );

    // T√∂r√∂lj√ºk a kiv√°lasztott v√°laszt
    this.selectedAnswers[questionId] = null;
  }

  // üîπ Felhaszn√°l√≥i adatok lek√©r√©se
  private getCurrentUserDatas(): any {
    const currentUserData = localStorage.getItem('currentUser') || sessionStorage.getItem('currentUser');
    if (currentUserData) {
      const parsedData = JSON.parse(currentUserData);
      parsedData.id = Number(parsedData.id);
      return parsedData;
    }
    return null;
  }

  getExpirationDate(endDate: string): string {
  const end = new Date(endDate);
  end.setDate(end.getDate() + 3); // Hozz√°adunk 3 napot
  return end.toISOString(); // Az ISO form√°tum√∫ d√°tumot haszn√°ljuk a biztons√°gos kezel√©s √©rdek√©ben
}

}
